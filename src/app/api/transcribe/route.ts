import { NextResponse } from 'next/server'
import { table, minifyData } from "../../utils/airtable"
import { OpenAIClient, AzureKeyCredential } from '@azure/openai';

export async function GET() {
    try {
        const records = await table.select({}).all();
        const minifiedRecords = await minifyData(records);

        return new NextResponse(JSON.stringify(minifiedRecords), {
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
          },
        })
   
    } catch (error) {
        console.error('Error handling GET request for data:', error);
        return NextResponse.json({ "message": "Error handling GET request for data" })
    }
}

/**
 * 
 * @param req 
 * @returns updated jp_text generated by Azure ChatGPT 4
 */
export async function PUT(req: Request) {
      try {
        const {id} = await req.json()
        const singleRecord = await table.find(id)
        const jp_text = singleRecord.get('jp_text')

        const prompt = `Translate this to japanese ${jp_text}`
        const messages = [
            {
              role: 'system',
              content:
                'You are a qualified translator',
            },
            { role: 'user', content: prompt },
        ];

        const client = new OpenAIClient(
          process.env.AZURE_ENDPOINT ,
          new AzureKeyCredential(process.env.AZURE_API_KEY ),
        );
        const deploymentId = 'gpt-4-test';
        const options = {
            temperature: 1,
        };
        const result = await client.getChatCompletions(
            deploymentId,
            messages,
            options,
        );

        for (const choice of result.choices) {
          const newData = `${choice.message?.content}`;
          const updatedField = {
            'jp_fix_text': newData
          }
          const updatedRecords = await table.update(id, updatedField);

          return new NextResponse(JSON.stringify(updatedRecords), {
            status: 200,
            headers: {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
              'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
          })
        } 

      } catch (error) {
        console.error('Error handling first POST request:', error);
        return NextResponse.json({ "message": "Missing required data" })
      }
}


  


