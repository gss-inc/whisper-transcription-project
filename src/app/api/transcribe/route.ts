import { NextResponse } from 'next/server'
import { table, minifyData } from "../../utils/airtable"
import { convertTextFormat } from "../../utils/format"
import { OpenAIClient, AzureKeyCredential } from '@azure/openai';
import axios from 'axios';

export async function GET() {
    try {
        const records = await table.select({}).all();
        const minifiedRecords = await minifyData(records);

        return new NextResponse(JSON.stringify(minifiedRecords), {
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
          },
        })
   
    } catch (error) {
        console.error('Error handling GET request for data:', error);
        return NextResponse.json({ "message": "Error handling GET request for data" })
    }
}

/**
 * 
 * @param req 
 * @returns updated jp_text generated by Azure ChatGPT 4
 */
export async function PUT(req: Request) {
      try {
        const {id} = await req.json()
        const singleRecord = await table.find(id)
        const jp_text = singleRecord.get('jp_text')

        const prompt = `文章を読み取り、会話の前後がおかしかったり、体裁がおかしな部分があれば修正した文章を生成してください。生成フォーマットはそのまま使用してください。`
        const messages = [
            {
              role: 'user',
              content: jp_text,
            },
            { role: 'assistant', content: prompt },
        ];

        const client = new OpenAIClient(
          process.env.AZURE_ENDPOINT ,
          new AzureKeyCredential(process.env.AZURE_API_KEY ),
        );
        const deploymentId = 'gpt-4-test';
        const options = {
            temperature: 1,
        };
        const result = await client.getChatCompletions(
            deploymentId,
            messages,
            options,
        );

        for (const choice of result.choices) {
          const newData = `${choice.message?.content}`;
          const updatedField = {
            'jp_fix_text': newData
          }
          const updatedRecords = await table.update(id, updatedField);

          return new NextResponse(JSON.stringify(updatedRecords), {
            status: 200,
            headers: {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
              'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
          })
        } 

      } catch (error) {
        console.error('Error handling first POST request:', error);
        return NextResponse.json({ "message": "Missing required data" })
      }
}

/**
 * 
 * @param req 
 * @returns transcribe mp3 and save to jp_text
 */
export async function POST(  
  request: Request ) {
  try {
    const id = 'recjKzDTyGexaoREh'
    const whisperApiKey = process.env.WHISPER_API_KEY;
    const formData = await request.formData()
    formData.append('model', 'whisper-1');
    formData.append('response_format', 'srt');

    const { data } = await axios.post(
      "https://api.openai.com/v1/audio/transcriptions",
      formData,
      {
        headers: {
          Authorization: `Bearer ${whisperApiKey}`,
        },
      }
    )
    const formattedData = convertTextFormat(data)
    // update to jp_fix column
    const updatedField = {
      'jp_text': formattedData
    }
    const transcribeText = await table.update(id, updatedField)
    console.log(transcribeText)
    return new NextResponse(JSON.stringify(transcribeText), {
      status: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    })

    // Check if a file was uploaded
    // if (!file) {
    //   return NextResponse.json({ message: `No file uploaded.` });
    // }

    // Check file type (MP4) and size (100MB limit)
    // if (file.type !== 'video/mp4' || file.size > 100 * 1024 * 1024) {
    //   return NextResponse.json({ message: `Invalid file format or size. Only MP4 files under 100MB are allowed.` });
    // }

    // Create FormData for the OpenAI API request
    
    // formData.append('file', file);


  } catch (error) {
    console.log(error.response.data.error.message)
    return NextResponse.json({ message: `An error occurred. : ${error.response.data.error.message}` });
  }
}
  





